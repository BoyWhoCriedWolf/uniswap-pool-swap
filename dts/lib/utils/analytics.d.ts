import { Currency, CurrencyAmount, Percent, Price, Token } from "@uniswap/sdk-core";
import { InterfaceTrade, QuoteMethod } from "state/routing/types";
export declare const getDurationUntilTimestampSeconds: (futureTimestampInSecondsSinceEpoch?: number) => number | undefined;
export declare const formatToDecimal: (intialNumberObject: Percent | CurrencyAmount<Token | Currency>, decimalPlace: number) => number;
export declare const getTokenAddress: (currency: Currency) => string;
export declare const formatPercentInBasisPointsNumber: (percent: Percent) => number;
export declare const formatPercentNumber: (percent: Percent) => number;
export declare const getPriceUpdateBasisPoints: (prevPrice: Price<Currency, Currency>, newPrice: Price<Currency, Currency>) => number;
export declare function formatCommonPropertiesForTrade(trade: InterfaceTrade, allowedSlippage: Percent): {
    routing: import("state/routing/types").TradeFillType;
    type: import("@uniswap/sdk-core").TradeType;
    ura_quote_id: string | undefined;
    ura_request_id: string | undefined;
    ura_quote_block_number: string | null | undefined;
    token_in_address: string;
    token_out_address: string;
    token_in_symbol: string | undefined;
    token_out_symbol: string | undefined;
    token_in_amount: number;
    token_out_amount: number;
    price_impact_basis_points: number | undefined;
    chain_id: number | undefined;
    estimated_network_fee_usd: number | undefined;
    minimum_output_after_slippage: string;
    allowed_slippage: number;
    method: QuoteMethod;
};
export declare const formatSwapSignedAnalyticsEventProperties: ({ trade, allowedSlippage, fiatValues, txHash, timeToSignSinceRequestMs, }: {
    trade: InterfaceTrade;
    allowedSlippage: Percent;
    fiatValues: {
        amountIn?: number;
        amountOut?: number;
    };
    txHash?: string | undefined;
    timeToSignSinceRequestMs?: number | undefined;
}) => {
    routing: import("state/routing/types").TradeFillType;
    type: import("@uniswap/sdk-core").TradeType;
    ura_quote_id: string | undefined;
    ura_request_id: string | undefined;
    ura_quote_block_number: string | null | undefined;
    token_in_address: string;
    token_out_address: string;
    token_in_symbol: string | undefined;
    token_out_symbol: string | undefined;
    token_in_amount: number;
    token_out_amount: number;
    price_impact_basis_points: number | undefined;
    chain_id: number | undefined;
    estimated_network_fee_usd: number | undefined;
    minimum_output_after_slippage: string;
    allowed_slippage: number;
    method: QuoteMethod;
    transaction_hash: string | undefined;
    token_in_amount_usd: number | undefined;
    token_out_amount_usd: number | undefined;
    time_to_sign_since_request_ms: number | undefined;
};
export declare const formatSwapQuoteReceivedEventProperties: (trade: InterfaceTrade, allowedSlippage: Percent, swapQuoteLatencyMs: number | undefined, inputTax: Percent, outputTax: Percent) => {
    swap_quote_block_number: string | null | undefined;
    allowed_slippage_basis_points: number;
    token_in_amount_max: string;
    token_out_amount_min: string;
    quote_latency_milliseconds: number | undefined;
    token_out_detected_tax: number;
    token_in_detected_tax: number;
    routing: import("state/routing/types").TradeFillType;
    type: import("@uniswap/sdk-core").TradeType;
    ura_quote_id: string | undefined;
    ura_request_id: string | undefined;
    ura_quote_block_number: string | null | undefined;
    token_in_address: string;
    token_out_address: string;
    token_in_symbol: string | undefined;
    token_out_symbol: string | undefined;
    token_in_amount: number;
    token_out_amount: number;
    price_impact_basis_points: number | undefined;
    chain_id: number | undefined;
    estimated_network_fee_usd: number | undefined;
    minimum_output_after_slippage: string;
    allowed_slippage: number;
    method: QuoteMethod;
};
