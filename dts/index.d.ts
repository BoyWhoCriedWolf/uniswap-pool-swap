/// <reference types="react" />
import 'polyfills';
import { SwapProps } from 'components/Swap';
import { WidgetProps } from 'components/Widget';
export type { JsonRpcProvider } from '@ethersproject/providers';
export { TradeType } from '@uniswap/sdk-core';
export type { Currency } from '@uniswap/sdk-core';
export type { TokenInfo } from '@uniswap/token-lists';
export { DialogAnimationType } from 'components/Dialog';
export type { DialogOptions, DialogWidgetProps } from 'components/Dialog';
export { SwapWidgetSkeleton } from 'components/Swap/Skeleton';
export type { SwapWidgetSkeletonProps } from 'components/Swap/Skeleton';
export { SupportedChainId } from 'constants/chains';
export { DEFAULT_LOCALE, SUPPORTED_LOCALES } from 'constants/locales';
export type { SupportedLocale } from 'constants/locales';
export { UnknownError, UserRejectedRequestError, WidgetError } from 'errors';
export type { WidgetPromise } from 'errors';
export { RouterPreference } from 'hooks/routing/types';
export type { SwapController } from 'hooks/swap/useSyncController';
export type { FeeOptions } from 'hooks/swap/useSyncConvenienceFee';
export type { DefaultAddress, TokenDefaults } from 'hooks/swap/useSyncTokenDefaults';
export type { OnTxFail, OnTxSubmit, OnTxSuccess, TransactionEventHandlers } from 'hooks/transactions';
export type { Flags } from 'hooks/useSyncFlags';
export type { AddEthereumChainParameter, OnConnectWalletClick, OnError, OnSwitchChain, WidgetEventHandlers, } from 'hooks/useSyncWidgetEventHandlers';
export { EMPTY_TOKEN_LIST, UNISWAP_TOKEN_LIST } from 'hooks/useTokenList';
export { validateTokenList, validateTokens } from 'hooks/useTokenList/validateTokenList';
export type { JsonRpcConnectionMap } from 'hooks/web3/useJsonRpcUrlsMap';
export { Field } from 'state/swap';
export type { OnAmountChange, OnExpandSwapDetails, OnInitialSwapQuote, OnPermit2Allowance, OnReviewSwapClick, OnRouterPreferenceChange, OnSettingsReset, OnSlippageChange, OnSubmitSwapClick, OnSwapApprove, OnSwapPriceUpdateAck, OnSwapQuote, OnSwapSend, OnSwitchTokens, OnTokenAllowance, OnTokenChange, OnTokenSelectorClick, OnTransactionDeadlineChange, OnWrapSend, SwapEventHandlers, SwapPerfEventHandlers, SwapSettingsEventHandlers, } from 'state/swap';
export type { Slippage } from 'state/swap/settings';
export { TransactionType } from 'state/transactions';
export type { ApprovalTransactionInfo, ExactInputSwapTransactionInfo, ExactOutputSwapTransactionInfo, SwapTransactionInfo, Transaction, TransactionInfo, UnwrapTransactionInfo, WrapTransactionInfo, } from 'state/transactions';
export { darkTheme, defaultTheme, lightTheme } from 'theme';
export type { Theme } from 'theme';
export { invertTradeType, toTradeType } from 'utils/tradeType';
export { Logo, LogoUpdater, getAssetsRepoURI, getNativeLogoURI, useLogo, useLogos } from './components/Logo';
export declare type SwapWidgetProps = SwapProps & WidgetProps;
export declare function SwapWidget(props: SwapWidgetProps): JSX.Element;
