import type { TransactionResponse } from "@ethersproject/providers";
import { ChainId, Token } from "@uniswap/sdk-core";
import { TransactionStatus } from "graphql/data/__generated__/types-and-hooks";
import { SwapResult } from "hooks/useSwapCallback";
import { TransactionDetails, TransactionInfo } from "./types";
export declare function useTransactionAdder(): (response: TransactionResponse, info: TransactionInfo, deadline?: number) => void;
export declare function useTransactionRemover(): (hash: string) => void;
export declare function useTransactionCanceller(): (hash: string, chainId: number, cancelHash: string) => void;
export declare function useMultichainTransactions(): [TransactionDetails, ChainId][];
export declare function useTransaction(transactionHash?: string): TransactionDetails | undefined;
export declare function useIsTransactionPending(transactionHash?: string): boolean;
export declare function useIsTransactionConfirmed(transactionHash?: string): boolean;
export declare function useSwapTransactionStatus(swapResult: SwapResult | undefined): TransactionStatus | undefined;
export declare function useHasPendingApproval(token?: Token, spender?: string): boolean;
export declare function useHasPendingRevocation(token?: Token, spender?: string): boolean;
export declare function isPendingTx(tx: TransactionDetails): boolean;
export declare function usePendingTransactions(): TransactionDetails[];
