import { ChainId, Token } from '@uniswap/sdk-core';
import { WRAPPED_NATIVE_CURRENCY, nativeOnChain, DAI, USDC_MAINNET, USDT, WBTC, ARB, DAI_ARBITRUM_ONE, USDC_ARBITRUM, USDT_ARBITRUM_ONE, WBTC_ARBITRUM_ONE, USDC_ARBITRUM_GOERLI, OP, DAI_OPTIMISM, USDC_OPTIMISM, USDT_OPTIMISM, WBTC_OPTIMISM, USDC_BASE, WETH_POLYGON, USDC_POLYGON, DAI_POLYGON, USDT_POLYGON, WBTC_POLYGON, WETH_POLYGON_MUMBAI, CEUR_CELO, CUSD_CELO, PORTAL_ETH_CELO, PORTAL_USDC_CELO, WBTC_CELO, CUSD_CELO_ALFAJORES, CEUR_CELO_ALFAJORES, DAI_BSC, USDC_BSC, USDT_BSC, ETH_BSC, BTC_BSC, BUSD_BSC, DAI_AVALANCHE, USDC_AVALANCHE, USDT_AVALANCHE, WETH_AVALANCHE } from './tokens.js';

// a list of tokens by chain
const WRAPPED_NATIVE_CURRENCIES_ONLY = Object.fromEntries(Object.entries(WRAPPED_NATIVE_CURRENCY).map(_ref => {
  let [key, value] = _ref;
  return [key, [value]];
}).filter(Boolean));

/**
 * Shows up in the currency select for swap and add liquidity
 */
const COMMON_BASES = {
  [ChainId.MAINNET]: [nativeOnChain(ChainId.MAINNET), DAI, USDC_MAINNET, USDT, WBTC, WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]],
  [ChainId.GOERLI]: [nativeOnChain(ChainId.GOERLI), WRAPPED_NATIVE_CURRENCY[ChainId.GOERLI]],
  [ChainId.SEPOLIA]: [nativeOnChain(ChainId.SEPOLIA), WRAPPED_NATIVE_CURRENCY[ChainId.SEPOLIA]],
  [ChainId.ARBITRUM_ONE]: [nativeOnChain(ChainId.ARBITRUM_ONE), ARB, DAI_ARBITRUM_ONE, USDC_ARBITRUM, USDT_ARBITRUM_ONE, WBTC_ARBITRUM_ONE, WRAPPED_NATIVE_CURRENCY[ChainId.ARBITRUM_ONE]],
  [ChainId.ARBITRUM_GOERLI]: [nativeOnChain(ChainId.ARBITRUM_GOERLI), WRAPPED_NATIVE_CURRENCY[ChainId.ARBITRUM_GOERLI], USDC_ARBITRUM_GOERLI],
  [ChainId.OPTIMISM]: [nativeOnChain(ChainId.OPTIMISM), OP, DAI_OPTIMISM, USDC_OPTIMISM, USDT_OPTIMISM, WBTC_OPTIMISM],
  [ChainId.OPTIMISM_GOERLI]: [nativeOnChain(ChainId.OPTIMISM_GOERLI)],
  [ChainId.BASE]: [nativeOnChain(ChainId.BASE), WRAPPED_NATIVE_CURRENCY[ChainId.BASE], USDC_BASE],
  [ChainId.POLYGON]: [nativeOnChain(ChainId.POLYGON), WETH_POLYGON, USDC_POLYGON, DAI_POLYGON, USDT_POLYGON, WBTC_POLYGON],
  [ChainId.POLYGON_MUMBAI]: [nativeOnChain(ChainId.POLYGON_MUMBAI), WRAPPED_NATIVE_CURRENCY[ChainId.POLYGON_MUMBAI], WETH_POLYGON_MUMBAI],
  [ChainId.CELO]: [nativeOnChain(ChainId.CELO), CEUR_CELO, CUSD_CELO, PORTAL_ETH_CELO, PORTAL_USDC_CELO, WBTC_CELO],
  [ChainId.CELO_ALFAJORES]: [nativeOnChain(ChainId.CELO_ALFAJORES), CUSD_CELO_ALFAJORES, CEUR_CELO_ALFAJORES],
  [ChainId.BNB]: [nativeOnChain(ChainId.BNB), DAI_BSC, USDC_BSC, USDT_BSC, ETH_BSC, BTC_BSC, BUSD_BSC],
  [ChainId.AVALANCHE]: [nativeOnChain(ChainId.AVALANCHE), DAI_AVALANCHE, USDC_AVALANCHE, USDT_AVALANCHE, WETH_AVALANCHE]
};

// used to construct the list of all pairs we consider by default in the frontend
({
  ...WRAPPED_NATIVE_CURRENCIES_ONLY,
  [ChainId.MAINNET]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[ChainId.MAINNET], DAI, USDC_MAINNET, USDT, WBTC],
  [ChainId.BNB]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[ChainId.BNB], DAI_BSC, USDC_BSC, USDT_BSC, BTC_BSC, BUSD_BSC, ETH_BSC],
  [ChainId.AVALANCHE]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[ChainId.AVALANCHE], DAI_AVALANCHE, USDC_AVALANCHE, USDT_AVALANCHE, WETH_AVALANCHE]
});
({
  [ChainId.MAINNET]: [[new Token(ChainId.MAINNET, "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 8, "cDAI", "Compound Dai"), new Token(ChainId.MAINNET, "0x39AA39c021dfbaE8faC545936693aC917d5E7563", 8, "cUSDC", "Compound USD Coin")], [USDC_MAINNET, USDT], [DAI, USDT]]
});

export { COMMON_BASES };
