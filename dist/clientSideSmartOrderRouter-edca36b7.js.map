{"version":3,"file":"clientSideSmartOrderRouter-edca36b7.js","sources":["../src/hooks/routing/transformSwapRouteToGetQuoteResult.ts","../src/hooks/routing/clientSideSmartOrderRouter.ts"],"sourcesContent":["import { Protocol } from '@uniswap/router-sdk'\nimport type { SwapRoute } from '@uniswap/smart-order-router'\nimport { QuoteResult, QuoteState, V2PoolInRoute, V3PoolInRoute } from 'state/routing/types'\nimport { isExactInput } from 'utils/tradeType'\n\n// from routing-api (https://github.com/Uniswap/routing-api/blob/main/lib/handlers/quote/quote.ts#L243-L311)\nexport function transformSwapRouteToGetQuoteResult({\n  quote,\n  quoteGasAdjusted,\n  route,\n  routeString,\n  estimatedGasUsed,\n  estimatedGasUsedQuoteToken,\n  estimatedGasUsedUSD,\n  gasPriceWei,\n  methodParameters,\n  blockNumber,\n  trade: { tradeType, inputAmount, outputAmount },\n}: SwapRoute & { routeString: string }): QuoteResult {\n  const routeResponse: Array<V3PoolInRoute[] | V2PoolInRoute[]> = []\n\n  for (const subRoute of route) {\n    const { amount, quote, tokenPath } = subRoute\n\n    if (subRoute.protocol === Protocol.V3) {\n      const pools = subRoute.route.pools\n      const curRoute: V3PoolInRoute[] = []\n      for (let i = 0; i < pools.length; i++) {\n        const nextPool = pools[i]\n        const tokenIn = tokenPath[i]\n        const tokenOut = tokenPath[i + 1]\n\n        let edgeAmountIn = undefined\n        if (i === 0) {\n          edgeAmountIn = isExactInput(tradeType) ? amount.quotient.toString() : quote.quotient.toString()\n        }\n\n        let edgeAmountOut = undefined\n        if (i === pools.length - 1) {\n          edgeAmountOut = isExactInput(tradeType) ? quote.quotient.toString() : amount.quotient.toString()\n        }\n\n        curRoute.push({\n          type: 'v3-pool',\n          tokenIn: {\n            chainId: tokenIn.chainId,\n            decimals: tokenIn.decimals,\n            address: tokenIn.address,\n            symbol: tokenIn.symbol,\n          },\n          tokenOut: {\n            chainId: tokenOut.chainId,\n            decimals: tokenOut.decimals,\n            address: tokenOut.address,\n            symbol: tokenOut.symbol,\n          },\n          fee: nextPool.fee.toString(),\n          liquidity: nextPool.liquidity.toString(),\n          sqrtRatioX96: nextPool.sqrtRatioX96.toString(),\n          tickCurrent: nextPool.tickCurrent.toString(),\n          amountIn: edgeAmountIn,\n          amountOut: edgeAmountOut,\n        })\n      }\n\n      routeResponse.push(curRoute)\n    } else if (subRoute.protocol === Protocol.V2) {\n      const pools = subRoute.route.pairs\n      const curRoute: V2PoolInRoute[] = []\n      for (let i = 0; i < pools.length; i++) {\n        const nextPool = pools[i]\n        const tokenIn = tokenPath[i]\n        const tokenOut = tokenPath[i + 1]\n\n        let edgeAmountIn = undefined\n        if (i === 0) {\n          edgeAmountIn = isExactInput(tradeType) ? amount.quotient.toString() : quote.quotient.toString()\n        }\n\n        let edgeAmountOut = undefined\n        if (i === pools.length - 1) {\n          edgeAmountOut = isExactInput(tradeType) ? quote.quotient.toString() : amount.quotient.toString()\n        }\n\n        const reserve0 = nextPool.reserve0\n        const reserve1 = nextPool.reserve1\n\n        curRoute.push({\n          type: 'v2-pool',\n          tokenIn: {\n            chainId: tokenIn.chainId,\n            decimals: tokenIn.decimals,\n            address: tokenIn.address,\n            symbol: tokenIn.symbol,\n          },\n          tokenOut: {\n            chainId: tokenOut.chainId,\n            decimals: tokenOut.decimals,\n            address: tokenOut.address,\n            symbol: tokenOut.symbol,\n          },\n          reserve0: {\n            token: {\n              chainId: reserve0.currency.wrapped.chainId,\n              decimals: reserve0.currency.wrapped.decimals,\n              address: reserve0.currency.wrapped.address,\n              symbol: reserve0.currency.wrapped.symbol,\n            },\n            quotient: reserve0.quotient.toString(),\n          },\n          reserve1: {\n            token: {\n              chainId: reserve1.currency.wrapped.chainId,\n              decimals: reserve1.currency.wrapped.decimals,\n              address: reserve1.currency.wrapped.address,\n              symbol: reserve1.currency.wrapped.symbol,\n            },\n            quotient: reserve1.quotient.toString(),\n          },\n          amountIn: edgeAmountIn,\n          amountOut: edgeAmountOut,\n        })\n      }\n\n      routeResponse.push(curRoute)\n    }\n  }\n\n  const amount = isExactInput(tradeType) ? inputAmount : outputAmount\n  return {\n    state: QuoteState.SUCCESS,\n    data: {\n      methodParameters,\n      blockNumber: blockNumber.toString(),\n      amount: amount.quotient.toString(),\n      amountDecimals: amount.toExact(),\n      quote: quote.quotient.toString(),\n      quoteDecimals: quote.toExact(),\n      quoteGasAdjusted: quoteGasAdjusted.quotient.toString(),\n      quoteGasAdjustedDecimals: quoteGasAdjusted.toExact(),\n      gasUseEstimateQuote: estimatedGasUsedQuoteToken.quotient.toString(),\n      gasUseEstimateQuoteDecimals: estimatedGasUsedQuoteToken.toExact(),\n      gasUseEstimate: estimatedGasUsed.toString(),\n      gasUseEstimateUSD: estimatedGasUsedUSD.toExact(),\n      gasPriceWei: gasPriceWei.toString(),\n      route: routeResponse,\n      routeString,\n    },\n  }\n}\n","import { BaseProvider } from '@ethersproject/providers'\nimport { BigintIsh, ChainId, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\nimport type { AlphaRouterConfig } from '@uniswap/smart-order-router'\n// This file is lazy-loaded, so the import of smart-order-router is intentional.\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport {\n  AlphaRouter,\n  OnChainQuoteProvider,\n  routeAmountsToString,\n  StaticV2SubgraphProvider,\n  UniswapMulticallProvider,\n} from '@uniswap/smart-order-router'\nimport { nativeOnChain } from 'constants/tokens'\nimport JSBI from 'jsbi'\nimport { GetQuoteArgs, QuoteResult, QuoteState } from 'state/routing/types'\nimport { isExactInput } from 'utils/tradeType'\n\nimport { transformSwapRouteToGetQuoteResult } from './transformSwapRouteToGetQuoteResult'\nimport { SwapRouterNativeAssets } from './types'\n\nconst AUTO_ROUTER_SUPPORTED_CHAINS: ChainId[] = Object.values(ChainId).filter((chainId): chainId is ChainId =>\n  Number.isInteger(chainId)\n)\n\nfunction isAutoRouterSupportedChain(chainId: ChainId | undefined): boolean {\n  return Boolean(chainId && AUTO_ROUTER_SUPPORTED_CHAINS.includes(chainId))\n}\n\n/** A cache of AlphaRouters, which must be initialized to a specific chain/provider. */\nconst routersCache = new WeakMap<BaseProvider, { [chainId: number]: AlphaRouter }>()\n\nfunction getRouter(chainId: ChainId, provider: BaseProvider): AlphaRouter {\n  const routers = routersCache.get(provider) || {}\n  const cached = routers[chainId]\n  if (cached) return cached\n\n  // V2 is unsupported for chains other than mainnet.\n  // TODO(zzmp): Upstream to @uniswap/smart-order-router, exporting an enum of supported v2 chains for clarity.\n  let v2SubgraphProvider\n  if (chainId !== ChainId.MAINNET) {\n    v2SubgraphProvider = new StaticV2SubgraphProvider(chainId)\n  }\n\n  // V3 computes on-chain, so the quoter must have gas limits appropriate to the provider.\n  // Most defaults are fine, but polygon needs a lower gas limit.\n  // TODO(zzmp): Upstream to @uniswap/smart-order-router, possibly making this easier to modify\n  // (eg allowing configuration without an instance to avoid duplicating multicall2Provider).\n  let onChainQuoteProvider\n  let multicall2Provider\n  if ([ChainId.POLYGON, ChainId.POLYGON_MUMBAI].includes(chainId)) {\n    multicall2Provider = new UniswapMulticallProvider(chainId, provider, 375_000)\n    // See https://github.com/Uniswap/smart-order-router/blob/98c58bdee9981fd9ffac9e7d7a97b18302d5f77a/src/routers/alpha-router/alpha-router.ts#L464-L487\n    onChainQuoteProvider = new OnChainQuoteProvider(\n      chainId,\n      provider,\n      multicall2Provider,\n      {\n        retries: 2,\n        minTimeout: 100,\n        maxTimeout: 1000,\n      },\n      {\n        multicallChunk: 10,\n        gasLimitPerCall: 5_000_000,\n        quoteMinSuccessRate: 0.1,\n      },\n      {\n        gasLimitOverride: 5_000_000,\n        multicallChunk: 5,\n      },\n      {\n        gasLimitOverride: 6_250_000,\n        multicallChunk: 4,\n      }\n    )\n  }\n\n  const router = new AlphaRouter({ chainId, provider, v2SubgraphProvider, multicall2Provider, onChainQuoteProvider })\n  routers[chainId] = router\n  routersCache.set(provider, routers)\n  return router\n}\n\nasync function getQuoteResult(\n  {\n    tradeType,\n    tokenIn,\n    tokenOut,\n    amount: amountRaw,\n  }: {\n    tradeType: TradeType\n    tokenIn: { address: string; chainId: number; decimals: number; symbol?: string }\n    tokenOut: { address: string; chainId: number; decimals: number; symbol?: string }\n    amount: BigintIsh | null\n  },\n  router: AlphaRouter,\n  routerConfig: Partial<AlphaRouterConfig>\n): Promise<QuoteResult> {\n  const tokenInIsNative = Object.values(SwapRouterNativeAssets).includes(tokenIn.address as SwapRouterNativeAssets)\n  const tokenOutIsNative = Object.values(SwapRouterNativeAssets).includes(tokenOut.address as SwapRouterNativeAssets)\n  const currencyIn = tokenInIsNative\n    ? nativeOnChain(tokenIn.chainId)\n    : new Token(tokenIn.chainId, tokenIn.address, tokenIn.decimals, tokenIn.symbol)\n  const currencyOut = tokenOutIsNative\n    ? nativeOnChain(tokenOut.chainId)\n    : new Token(tokenOut.chainId, tokenOut.address, tokenOut.decimals, tokenOut.symbol)\n\n  const baseCurrency = isExactInput(tradeType) ? currencyIn : currencyOut\n  const quoteCurrency = isExactInput(tradeType) ? currencyOut : currencyIn\n  const amount = CurrencyAmount.fromRawAmount(baseCurrency, JSBI.BigInt(amountRaw ?? '1')) // a null amountRaw should initialize the route\n  const route = await router.route(amount, quoteCurrency, tradeType, /*swapConfig=*/ undefined, routerConfig)\n\n  if (!amountRaw) return { state: QuoteState.INITIALIZED }\n  if (!route) return { state: QuoteState.NOT_FOUND }\n\n  return transformSwapRouteToGetQuoteResult({ ...route, routeString: routeAmountsToString(route.route) })\n}\n\nexport async function getClientSideQuoteResult(\n  {\n    tokenInAddress,\n    tokenInChainId,\n    tokenInDecimals,\n    tokenInSymbol,\n    tokenOutAddress,\n    tokenOutChainId,\n    tokenOutDecimals,\n    tokenOutSymbol,\n    amount,\n    tradeType,\n    provider,\n  }: GetQuoteArgs,\n  routerConfig: Partial<AlphaRouterConfig>\n) {\n  if (!isAutoRouterSupportedChain(tokenInChainId)) {\n    throw new Error(`Router does not support this token's chain (chainId: ${tokenInChainId}).`)\n  }\n\n  const router = getRouter(tokenInChainId, provider)\n  return getQuoteResult(\n    {\n      tradeType,\n      tokenIn: {\n        address: tokenInAddress,\n        chainId: tokenInChainId,\n        decimals: tokenInDecimals,\n        symbol: tokenInSymbol,\n      },\n      tokenOut: {\n        address: tokenOutAddress,\n        chainId: tokenOutChainId,\n        decimals: tokenOutDecimals,\n        symbol: tokenOutSymbol,\n      },\n      amount,\n    },\n    router,\n    routerConfig\n  )\n}\n"],"names":["transformSwapRouteToGetQuoteResult","quote","quoteGasAdjusted","route","routeString","estimatedGasUsed","estimatedGasUsedQuoteToken","estimatedGasUsedUSD","gasPriceWei","methodParameters","blockNumber","trade","tradeType","inputAmount","outputAmount","routeResponse","subRoute","amount","tokenPath","protocol","Protocol","V3","pools","curRoute","i","length","nextPool","tokenIn","tokenOut","edgeAmountIn","undefined","isExactInput","quotient","toString","edgeAmountOut","push","type","chainId","decimals","address","symbol","fee","liquidity","sqrtRatioX96","tickCurrent","amountIn","amountOut","V2","pairs","reserve0","reserve1","token","currency","wrapped","_iterator","state","QuoteState","SUCCESS","data","amountDecimals","toExact","quoteDecimals","quoteGasAdjustedDecimals","gasUseEstimateQuote","gasUseEstimateQuoteDecimals","gasUseEstimate","gasUseEstimateUSD","AUTO_ROUTER_SUPPORTED_CHAINS","Object","values","ChainId","filter","Number","isInteger","routersCache","WeakMap","getRouter","provider","v2SubgraphProvider","onChainQuoteProvider","multicall2Provider","routers","get","cached","MAINNET","StaticV2SubgraphProvider","POLYGON","POLYGON_MUMBAI","includes","UniswapMulticallProvider","OnChainQuoteProvider","retries","minTimeout","maxTimeout","multicallChunk","gasLimitPerCall","quoteMinSuccessRate","gasLimitOverride","router","AlphaRouter","set","getQuoteResult","routerConfig","amountRaw","tokenInIsNative","SwapRouterNativeAssets","tokenOutIsNative","currencyIn","nativeOnChain","Token","currencyOut","baseCurrency","quoteCurrency","CurrencyAmount","fromRawAmount","JSBI","BigInt","_context","INITIALIZED","NOT_FOUND","routeAmountsToString","getClientSideQuoteResult","tokenInAddress","tokenInChainId","tokenInDecimals","tokenInSymbol","tokenOutAddress","tokenOutChainId","tokenOutDecimals","tokenOutSymbol","Boolean","_context2","Error"],"mappings":"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"}